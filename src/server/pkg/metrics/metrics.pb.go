// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: server/pkg/metrics/metrics.proto

package metrics

import (
	fmt "fmt"
	_ "github.com/gogo/protobuf/gogoproto"
	proto "github.com/golang/protobuf/proto"
	io "io"
	math "math"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion2 // please upgrade the proto package

type Metrics struct {
	ClusterID            string   `protobuf:"bytes,1,opt,name=cluster_id,json=clusterId,proto3" json:"cluster_id,omitempty"`
	PodID                string   `protobuf:"bytes,2,opt,name=pod_id,json=podId,proto3" json:"pod_id,omitempty"`
	Nodes                int64    `protobuf:"varint,3,opt,name=nodes,proto3" json:"nodes,omitempty"`
	Version              string   `protobuf:"bytes,4,opt,name=version,proto3" json:"version,omitempty"`
	Repos                int64    `protobuf:"varint,5,opt,name=repos,proto3" json:"repos,omitempty"`
	Commits              int64    `protobuf:"varint,6,opt,name=commits,proto3" json:"commits,omitempty"`
	Files                int64    `protobuf:"varint,7,opt,name=files,proto3" json:"files,omitempty"`
	Bytes                int64    `protobuf:"varint,8,opt,name=bytes,proto3" json:"bytes,omitempty"`
	Jobs                 int64    `protobuf:"varint,9,opt,name=jobs,proto3" json:"jobs,omitempty"`
	Pipelines            int64    `protobuf:"varint,10,opt,name=pipelines,proto3" json:"pipelines,omitempty"`
	ArchivedCommits      int64    `protobuf:"varint,11,opt,name=archived_commits,json=archivedCommits,proto3" json:"archived_commits,omitempty"`
	CancelledCommits     int64    `protobuf:"varint,12,opt,name=cancelled_commits,json=cancelledCommits,proto3" json:"cancelled_commits,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *Metrics) Reset()         { *m = Metrics{} }
func (m *Metrics) String() string { return proto.CompactTextString(m) }
func (*Metrics) ProtoMessage()    {}
func (*Metrics) Descriptor() ([]byte, []int) {
	return fileDescriptor_6561ed73a72f8e1f, []int{0}
}
func (m *Metrics) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *Metrics) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_Metrics.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *Metrics) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Metrics.Merge(m, src)
}
func (m *Metrics) XXX_Size() int {
	return m.Size()
}
func (m *Metrics) XXX_DiscardUnknown() {
	xxx_messageInfo_Metrics.DiscardUnknown(m)
}

var xxx_messageInfo_Metrics proto.InternalMessageInfo

func (m *Metrics) GetClusterID() string {
	if m != nil {
		return m.ClusterID
	}
	return ""
}

func (m *Metrics) GetPodID() string {
	if m != nil {
		return m.PodID
	}
	return ""
}

func (m *Metrics) GetNodes() int64 {
	if m != nil {
		return m.Nodes
	}
	return 0
}

func (m *Metrics) GetVersion() string {
	if m != nil {
		return m.Version
	}
	return ""
}

func (m *Metrics) GetRepos() int64 {
	if m != nil {
		return m.Repos
	}
	return 0
}

func (m *Metrics) GetCommits() int64 {
	if m != nil {
		return m.Commits
	}
	return 0
}

func (m *Metrics) GetFiles() int64 {
	if m != nil {
		return m.Files
	}
	return 0
}

func (m *Metrics) GetBytes() int64 {
	if m != nil {
		return m.Bytes
	}
	return 0
}

func (m *Metrics) GetJobs() int64 {
	if m != nil {
		return m.Jobs
	}
	return 0
}

func (m *Metrics) GetPipelines() int64 {
	if m != nil {
		return m.Pipelines
	}
	return 0
}

func (m *Metrics) GetArchivedCommits() int64 {
	if m != nil {
		return m.ArchivedCommits
	}
	return 0
}

func (m *Metrics) GetCancelledCommits() int64 {
	if m != nil {
		return m.CancelledCommits
	}
	return 0
}

func init() {
	proto.RegisterType((*Metrics)(nil), "metrics.Metrics")
}

func init() { proto.RegisterFile("server/pkg/metrics/metrics.proto", fileDescriptor_6561ed73a72f8e1f) }

var fileDescriptor_6561ed73a72f8e1f = []byte{
	// 339 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x64, 0x91, 0x41, 0x4a, 0xc3, 0x40,
	0x14, 0x40, 0x4d, 0xdb, 0x34, 0x66, 0x54, 0xac, 0x43, 0x17, 0x83, 0x48, 0x1a, 0x5c, 0x55, 0x94,
	0x66, 0x21, 0x5e, 0xa0, 0x2d, 0x48, 0x16, 0x82, 0x64, 0xe9, 0xa6, 0x34, 0x33, 0xdf, 0x74, 0x34,
	0xc9, 0x0c, 0x33, 0x69, 0xa1, 0x37, 0xf1, 0x48, 0x2e, 0x3d, 0x41, 0x91, 0x78, 0x00, 0xaf, 0x20,
	0x99, 0x24, 0x5a, 0x70, 0x95, 0xff, 0xde, 0x7f, 0x81, 0x81, 0x8f, 0x7c, 0x0d, 0x6a, 0x03, 0x2a,
	0x90, 0xaf, 0x49, 0x90, 0x41, 0xa1, 0x38, 0xd5, 0xed, 0x77, 0x22, 0x95, 0x28, 0x04, 0x76, 0x1a,
	0x3c, 0x1f, 0x26, 0x22, 0x11, 0xc6, 0x05, 0xd5, 0x54, 0xaf, 0x2f, 0xbf, 0x3b, 0xc8, 0x79, 0xa8,
	0x0b, 0x7c, 0x83, 0x10, 0x4d, 0xd7, 0xba, 0x00, 0xb5, 0xe0, 0x8c, 0x58, 0xbe, 0x35, 0x76, 0xa7,
	0x27, 0xe5, 0x6e, 0xe4, 0xce, 0x6a, 0x1b, 0xce, 0x23, 0xb7, 0x09, 0x42, 0x86, 0x7d, 0xd4, 0x97,
	0x82, 0x55, 0x65, 0xc7, 0x94, 0x6e, 0xb9, 0x1b, 0xd9, 0x8f, 0x82, 0x85, 0xf3, 0xc8, 0x96, 0x82,
	0x85, 0x0c, 0x0f, 0x91, 0x9d, 0x0b, 0x06, 0x9a, 0x74, 0x7d, 0x6b, 0xdc, 0x8d, 0x6a, 0xc0, 0x04,
	0x39, 0x1b, 0x50, 0x9a, 0x8b, 0x9c, 0xf4, 0xaa, 0x1f, 0xa3, 0x16, 0xab, 0x5e, 0x81, 0x14, 0x9a,
	0xd8, 0x75, 0x6f, 0xa0, 0xea, 0xa9, 0xc8, 0x32, 0x5e, 0x68, 0xd2, 0x37, 0xbe, 0xc5, 0xaa, 0x7f,
	0xe6, 0x29, 0x68, 0xe2, 0xd4, 0xbd, 0x81, 0xca, 0xc6, 0xdb, 0x02, 0x34, 0x39, 0xac, 0xad, 0x01,
	0x8c, 0x51, 0xef, 0x45, 0xc4, 0x9a, 0xb8, 0x46, 0x9a, 0x19, 0x5f, 0x20, 0x57, 0x72, 0x09, 0x29,
	0xcf, 0x41, 0x13, 0x64, 0x16, 0x7f, 0x02, 0x5f, 0xa1, 0xc1, 0x52, 0xd1, 0x15, 0xdf, 0x00, 0x5b,
	0xb4, 0x0f, 0x38, 0x32, 0xd1, 0x69, 0xeb, 0x67, 0xcd, 0x43, 0xae, 0xd1, 0x19, 0x5d, 0xe6, 0x14,
	0xd2, 0x74, 0xaf, 0x3d, 0x36, 0xed, 0xe0, 0x77, 0xd1, 0xc4, 0xd3, 0xfb, 0xf7, 0xd2, 0xb3, 0x3e,
	0x4a, 0xcf, 0xfa, 0x2c, 0x3d, 0xeb, 0xed, 0xcb, 0x3b, 0x78, 0xba, 0x4b, 0x78, 0xb1, 0x5a, 0xc7,
	0x13, 0x2a, 0xb2, 0x40, 0x2e, 0xe9, 0x6a, 0xcb, 0x40, 0xed, 0x4f, 0x5a, 0xd1, 0xe0, 0xff, 0x9d,
	0xe3, 0xbe, 0xb9, 0xe0, 0xed, 0x4f, 0x00, 0x00, 0x00, 0xff, 0xff, 0xf2, 0x04, 0xf4, 0xd5, 0x04,
	0x02, 0x00, 0x00,
}

func (m *Metrics) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Metrics) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.ClusterID) > 0 {
		dAtA[i] = 0xa
		i++
		i = encodeVarintMetrics(dAtA, i, uint64(len(m.ClusterID)))
		i += copy(dAtA[i:], m.ClusterID)
	}
	if len(m.PodID) > 0 {
		dAtA[i] = 0x12
		i++
		i = encodeVarintMetrics(dAtA, i, uint64(len(m.PodID)))
		i += copy(dAtA[i:], m.PodID)
	}
	if m.Nodes != 0 {
		dAtA[i] = 0x18
		i++
		i = encodeVarintMetrics(dAtA, i, uint64(m.Nodes))
	}
	if len(m.Version) > 0 {
		dAtA[i] = 0x22
		i++
		i = encodeVarintMetrics(dAtA, i, uint64(len(m.Version)))
		i += copy(dAtA[i:], m.Version)
	}
	if m.Repos != 0 {
		dAtA[i] = 0x28
		i++
		i = encodeVarintMetrics(dAtA, i, uint64(m.Repos))
	}
	if m.Commits != 0 {
		dAtA[i] = 0x30
		i++
		i = encodeVarintMetrics(dAtA, i, uint64(m.Commits))
	}
	if m.Files != 0 {
		dAtA[i] = 0x38
		i++
		i = encodeVarintMetrics(dAtA, i, uint64(m.Files))
	}
	if m.Bytes != 0 {
		dAtA[i] = 0x40
		i++
		i = encodeVarintMetrics(dAtA, i, uint64(m.Bytes))
	}
	if m.Jobs != 0 {
		dAtA[i] = 0x48
		i++
		i = encodeVarintMetrics(dAtA, i, uint64(m.Jobs))
	}
	if m.Pipelines != 0 {
		dAtA[i] = 0x50
		i++
		i = encodeVarintMetrics(dAtA, i, uint64(m.Pipelines))
	}
	if m.ArchivedCommits != 0 {
		dAtA[i] = 0x58
		i++
		i = encodeVarintMetrics(dAtA, i, uint64(m.ArchivedCommits))
	}
	if m.CancelledCommits != 0 {
		dAtA[i] = 0x60
		i++
		i = encodeVarintMetrics(dAtA, i, uint64(m.CancelledCommits))
	}
	if m.XXX_unrecognized != nil {
		i += copy(dAtA[i:], m.XXX_unrecognized)
	}
	return i, nil
}

func encodeVarintMetrics(dAtA []byte, offset int, v uint64) int {
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return offset + 1
}
func (m *Metrics) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.ClusterID)
	if l > 0 {
		n += 1 + l + sovMetrics(uint64(l))
	}
	l = len(m.PodID)
	if l > 0 {
		n += 1 + l + sovMetrics(uint64(l))
	}
	if m.Nodes != 0 {
		n += 1 + sovMetrics(uint64(m.Nodes))
	}
	l = len(m.Version)
	if l > 0 {
		n += 1 + l + sovMetrics(uint64(l))
	}
	if m.Repos != 0 {
		n += 1 + sovMetrics(uint64(m.Repos))
	}
	if m.Commits != 0 {
		n += 1 + sovMetrics(uint64(m.Commits))
	}
	if m.Files != 0 {
		n += 1 + sovMetrics(uint64(m.Files))
	}
	if m.Bytes != 0 {
		n += 1 + sovMetrics(uint64(m.Bytes))
	}
	if m.Jobs != 0 {
		n += 1 + sovMetrics(uint64(m.Jobs))
	}
	if m.Pipelines != 0 {
		n += 1 + sovMetrics(uint64(m.Pipelines))
	}
	if m.ArchivedCommits != 0 {
		n += 1 + sovMetrics(uint64(m.ArchivedCommits))
	}
	if m.CancelledCommits != 0 {
		n += 1 + sovMetrics(uint64(m.CancelledCommits))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func sovMetrics(x uint64) (n int) {
	for {
		n++
		x >>= 7
		if x == 0 {
			break
		}
	}
	return n
}
func sozMetrics(x uint64) (n int) {
	return sovMetrics(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *Metrics) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowMetrics
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Metrics: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Metrics: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ClusterID", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMetrics
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthMetrics
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthMetrics
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ClusterID = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field PodID", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMetrics
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthMetrics
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthMetrics
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.PodID = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Nodes", wireType)
			}
			m.Nodes = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMetrics
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Nodes |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Version", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMetrics
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthMetrics
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthMetrics
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Version = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 5:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Repos", wireType)
			}
			m.Repos = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMetrics
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Repos |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 6:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Commits", wireType)
			}
			m.Commits = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMetrics
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Commits |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 7:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Files", wireType)
			}
			m.Files = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMetrics
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Files |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 8:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Bytes", wireType)
			}
			m.Bytes = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMetrics
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Bytes |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 9:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Jobs", wireType)
			}
			m.Jobs = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMetrics
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Jobs |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 10:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Pipelines", wireType)
			}
			m.Pipelines = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMetrics
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Pipelines |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 11:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ArchivedCommits", wireType)
			}
			m.ArchivedCommits = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMetrics
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ArchivedCommits |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 12:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field CancelledCommits", wireType)
			}
			m.CancelledCommits = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMetrics
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.CancelledCommits |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipMetrics(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthMetrics
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthMetrics
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipMetrics(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowMetrics
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowMetrics
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
			return iNdEx, nil
		case 1:
			iNdEx += 8
			return iNdEx, nil
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowMetrics
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthMetrics
			}
			iNdEx += length
			if iNdEx < 0 {
				return 0, ErrInvalidLengthMetrics
			}
			return iNdEx, nil
		case 3:
			for {
				var innerWire uint64
				var start int = iNdEx
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return 0, ErrIntOverflowMetrics
					}
					if iNdEx >= l {
						return 0, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					innerWire |= (uint64(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				innerWireType := int(innerWire & 0x7)
				if innerWireType == 4 {
					break
				}
				next, err := skipMetrics(dAtA[start:])
				if err != nil {
					return 0, err
				}
				iNdEx = start + next
				if iNdEx < 0 {
					return 0, ErrInvalidLengthMetrics
				}
			}
			return iNdEx, nil
		case 4:
			return iNdEx, nil
		case 5:
			iNdEx += 4
			return iNdEx, nil
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
	}
	panic("unreachable")
}

var (
	ErrInvalidLengthMetrics = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowMetrics   = fmt.Errorf("proto: integer overflow")
)
